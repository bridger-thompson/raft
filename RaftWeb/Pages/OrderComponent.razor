@using RaftWeb.Models;
@using RaftWeb.Services;
@inject OrderService orderService;
@inject BalanceService balanceService;
@inject ProductService productService;
@inject RaftService service;

<div class="border rounded shadow-sm mb-2">
  @if (Cart is not null)
  {
    <div class="row my-2">
      <div class="col ps-3">
        <div class="fw-bold">Placed By:</div>
        <div>@Cart.Username</div>
        <div>Status: @Status</div>
      </div>
      <div class="col">
        <div class="fw-bold">Items:</div>
        <div class="list-group">
          @foreach (var item in Cart.Items)
          {
            <li class="list-group-item d-flex justify-content-between lh-sm">
              <div>
                <div class="fw-bold">@item.Name</div>
                <div class="text-muted small">Quantity: @item.Quantity</div>
              </div>
              <span>@item.Cost.ToString("C")</span>
            </li>
          }
        </div>
      </div>
      <div class="col text-center">
        <div class="fw-bold">Total (USD): @TotalPrice?.ToString("C")</div>
        <div class="mt-2">
          <button class="btn btn-primary" @onclick="() => Process()">Process</button>
        </div>
      </div>
    </div>
  }
</div>


@code {
  [Parameter]
  public Guid OrderId { get; set; }

  [Parameter]
  public EventCallback OnOrderProcessed { get; set; }

  private Cart? Cart;
  private decimal? TotalPrice => Cart?.Items.Sum(item => item.Cost * (item.Quantity ?? 1));
  private string Status = string.Empty;
  private decimal? usersBalance;
  private decimal? vendorBalance;
  private List<Func<Task>> compensatingActions = new();

  protected override async Task OnInitializedAsync()
  {
    await Load();
  }

  private async Task Load()
  {
    (Cart, Status) = await orderService.GetOrder(OrderId);
    if (Cart is not null)
    {
      var balanceResult = await service.StrongGet(balanceService.GetKey(Cart.Username));
      usersBalance = balanceService.GetBalance(balanceResult);


      var vendorResult = await service.StrongGet(balanceService.GetKey("vendor"));
      vendorBalance = balanceService.GetBalance(vendorResult);
    }
  }

  private async Task Process()
  {
    if (Cart is not null && TotalPrice.HasValue && usersBalance.HasValue && vendorBalance.HasValue)
    {
      await WithdrawUserBalance();
      await DecreaseStock();
      await DepositVendorBalance();
      await UpdateOrderStatusToProcessed();
      await RemoveOrderFromPending();
    }
  }

  private async Task WithdrawUserBalance()
  {
    var balanceResult = await service.StrongGet(balanceService.GetKey(Cart.Username));
    await balanceService.Withdraw(usersBalance, TotalPrice ?? 0, Cart.Username, balanceResult);
    compensatingActions.Add(CompensateUserBalanceWithdrawal);
  }

  private async Task CompensateUserBalanceWithdrawal()
  {
    var balanceResult = await service.StrongGet(balanceService.GetKey(Cart.Username));
    await balanceService.Deposit(usersBalance, TotalPrice ?? 0, Cart.Username, balanceResult);
  }

  private async Task DecreaseStock()
  {
    foreach (var item in Cart.Items)
    {
      var productResult = await service.StrongGet(productService.GetKey(item));
      var quantity = productService.LoadQuantity(productResult);
      if (quantity is not null && quantity > 0)
      {
        await productService.DecreaseQuantity(productService.GetKey(item), quantity, productResult, item.Quantity ?? 1);
      }
    }
    foreach (var item in Cart.Items)
    {
      compensatingActions.Add(() => CompensateStockDecrease(item));
    }
  }

  private async Task CompensateStockDecrease(Product item)
  {
    var productResult = await service.StrongGet(productService.GetKey(item));
    var quantity = productService.LoadQuantity(productResult);
    if (quantity is not null && quantity > 0)
    {
      await productService.IncreaseQuantity(productService.GetKey(item), quantity, productResult, item.Quantity ?? 1);
    }
  }

  private async Task DepositVendorBalance()
  {
    var vendorResult = await service.StrongGet(balanceService.GetKey("vendor"));
    await balanceService.Deposit(vendorBalance, TotalPrice ?? 0, "vendor", vendorResult);
    compensatingActions.Add(CompensateVendorBalanceDeposit);
  }

  private async Task CompensateVendorBalanceDeposit()
  {
    var vendorResult = await service.StrongGet(balanceService.GetKey("vendor"));
    await balanceService.Withdraw(vendorBalance, TotalPrice ?? 0, "vendor", vendorResult);
  }

  private async Task UpdateOrderStatusToProcessed()
  {
    var processorId = Guid.NewGuid();
    var status = $"Processed By {processorId}";
    var orderStatus = await orderService.GetOrderStatus(OrderId);
    if (!orderStatus.Value.Contains("Processed"))
    {
      await orderService.UpdateOrderStatus(OrderId, status);
    }
    compensatingActions.Add(() => CompensateOrderStatusUpdate(processorId));
  }

  private async Task CompensateOrderStatusUpdate(Guid processorId)
  {
    var status = $"pending from processor {processorId}";
    await orderService.UpdateOrderStatus(OrderId, status);
  }

  private async Task RemoveOrderFromPending()
  {
    await orderService.RemovePendingOrder(OrderId);
    await OnOrderProcessed.InvokeAsync();
    compensatingActions.Add(CompensateRemoveOrderFromPending);
  }

  private async Task CompensateRemoveOrderFromPending()
  {
    await orderService.AddPendingOrder(OrderId);
    await OnOrderProcessed.InvokeAsync();
  }
}
